from typing import Dict, Any, List


class VulnerabilityAnalyzer:
    """Handles vulnerability detection and risk scoring."""
    
    @staticmethod
    def check_common_vulnerabilities(scan_results: Dict[str, Any]) -> List[str]:
        """Check for common vulnerabilities based on scan results."""
        vulnerabilities = []
        
        # Check for missing security headers
        for service, headers_info in scan_results.get('http_headers', {}).items():
            missing_headers = headers_info.get('headers_missing', [])
            if len(missing_headers) >= 3:
                vulnerabilities.append(f"Multiple security headers missing on {service}: {', '.join(missing_headers)}")
            
            # Check for specific high-risk missing headers
            if 'X-Frame-Options' in missing_headers:
                vulnerabilities.append(f"Clickjacking vulnerability: X-Frame-Options missing on {service}")
            if 'X-Content-Type-Options' in missing_headers:
                vulnerabilities.append(f"MIME sniffing vulnerability: X-Content-Type-Options missing on {service}")
        
        # Check for exposed services
        open_ports = [p for p in scan_results.get('ports', []) if p['state'] == 'open']
        for port_info in open_ports:
            service = port_info['service']
            port = port_info['port']
            
            if service == 'ftp':
                vulnerabilities.append(f"FTP service exposed on port {port} - consider using SFTP/FTPS")
            elif service == 'telnet':
                vulnerabilities.append(f"Telnet service exposed on port {port} - insecure protocol, use SSH")
            elif service == 'http' and not scan_results.get('http_headers'):
                vulnerabilities.append(f"HTTP service exposed on port {port} without encryption - consider HTTPS")

        # Check TLS certificate issues
        tls_cert = scan_results.get('tls_cert', {})
        if tls_cert:
            if tls_cert.get('is_expired'):
                vulnerabilities.append("TLS certificate has expired")
            elif tls_cert.get('is_near_expiry'):
                vulnerabilities.append("TLS certificate expires soon")
        
        return vulnerabilities
    
    @staticmethod
    def calculate_risk_score(scan_results: Dict[str, Any]) -> int:
        """Calculate a simple risk score based on findings."""
        score = 0
        open_ports = len([p for p in scan_results.get('ports', []) if p['state'] == 'open'])
        
        # Add points for each open port
        score += open_ports * 5
        
        # Add points for missing security headers
        for service in scan_results.get('http_headers', {}).values():
            score += len(service.get('headers_missing', [])) * 3
        
        # Add points for specific high-risk services
        for port_info in scan_results.get('ports', []):
            if port_info['state'] == 'open':
                if port_info['service'] in ['ftp', 'telnet']:
                    score += 10
                elif port_info['service'] == 'http' and 443 not in [p['port'] for p in scan_results.get('ports', []) if p['state'] == 'open']:
                    score += 5
        
        # Add points for certificate issues
        tls_cert = scan_results.get('tls_cert', {})
        if tls_cert:
            if tls_cert.get('is_expired'):
                score += 15
            elif tls_cert.get('is_near_expiry'):
                score += 10
        
        # Add points for vulnerabilities found
        score += len(scan_results.get('vulnerabilities', [])) * 2
        
        return min(score, 100)  # Cap at 100